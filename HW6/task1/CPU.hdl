// This file is part of https://nam05.safelinks.protection.outlook.com/?url=www.nand2tetris.org&amp;data=02%7C01%7Crb86613n%40pace.edu%7C6f5859d4247f430978d108d6b62f0e00%7C0799c53eca9a49e88901064a6412a41d%7C1%7C0%7C636896710553124528&amp;sdata=dfTveATvzXH3m8gfIGH3CLsC%2FRc08ZRDWZm4hF%2FO8vg%3D&amp;reserved=0
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

/* Required: 16 gates or fewer */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=instruction[5], out=Aload);
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=MuxinA);

    ARegister(in=MuxinA, load=Aload, out[0..14]=addressM, out=Aout);

    Mux16(a=Aout, b=inM, sel=instruction[12], out=MuxinALU);
    And(a=instruction[15], b=instruction[4], out=Dload);

    DRegister(in=ALUout, load=Dload, out=Dout);

    ALU(x=Dout, y=MuxinALU, zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout,
        zr=zr, ng=ng);    //outM

    And(a=instruction[15], b=instruction[3], out=writeM);  //Write to M
    //jump
    //  Not(in=zr, out=Nzr);
    //  Not(in=ng, out=Nng);
    //  And(a=Nzr, b=Nng, out=NotzrAndNotng);

    // Nor(a=zr, b=ng, out=ZRNorNG);
    // And(a=ZRNorNG, b=instruction[0], out=jgt);  //jump if great than zero.
    // And(a=zr, b=instruction[1], out=jeq);  //jump if equal to zero.
    // And(a=ng, b=instruction[2], out=jlt);  //jump if less than zero.
    // Or(a=jeq, b=jlt, out=jle); // jump if less than/or equal to zero.
    // Or(a=jle, b=jgt, out=jmp);
    // And(a=instruction[15], b=jmp, out=loadPC);

    // update for resubmission
    And(a=instruction[15], b=instruction[0], out=jump1);
    And(a=instruction[15], b=instruction[1], out=jump2);
    And(a=instruction[15], b=instruction[2], out=jump3);
    Mux4Way(a=jump1, b=jump2, c=jump3, d=jump1, sel[0] = zr, sel[1] = ng, out = loadPC);

    PC(in=Aout,  load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}
