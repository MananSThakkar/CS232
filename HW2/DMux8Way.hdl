// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux8Way.hdl

/**
 * 8-way demultiplexor:
 * {a, b, c, d, e, f, g, h} = {in, 0, 0, 0, 0, 0, 0, 0} if sel == 000
 *                            {0, in, 0, 0, 0, 0, 0, 0} if sel == 001
 *                            etc.
 *                            {0, 0, 0, 0, 0, 0, 0, in} if sel == 111
 */

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;
     PARTS:  //(less gates)

     DMux(in=in, sel=sel[2], a=x, b=y);
     DMux4Way(in=x, sel[1]=sel[1], sel[0]=sel[0], a=a, b=b, c=c, d=d);
     DMux4Way(in=y, sel[1]=sel[1], sel[0]=sel[0], a=e, b=f, c=g, d=h);
    
}

 
//    (Trail 2 - passed) (extra gates)  
//    DMux(in=in, sel=sel[2], a=x, b=y);
//    DMux(in=x, sel=sel[1], a=aa, b=bb);
//    DMux(in=y, sel=sel[1], a=cc, b=dd);
//    DMux(in=aa, sel=sel[0], a=a, b=b);
//    DMux(in=bb, sel=sel[0], a=c, b=d);
//    DMux(in=cc, sel=sel[0], a=e, b=f);
//    DMux(in=dd, sel=sel[0], a=g, b=h);

//   (trial - 1) (failed)
//   DMux(in=in, sel=sel[1], a=m, b=n); 
//   DMux(in=in, sel=sel[1], a=o, b=p);
//   DMux(in=m, sel=sel[0], a=a, b=b);
//   DMux(in=n, sel=sel[0], a=c, b=d);
//   DMux(in=o, sel=sel[0], a=e, b=f);
//   DMux(in=p, sel=sel[0], a=g, b=h);




